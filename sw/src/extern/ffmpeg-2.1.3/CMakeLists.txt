# extern/ffmpeg-2.1.3/CMakeLists.txt

project(ffmpeg)
include(CheckFunctionExists)

if(UQUAD_PLATFORM_MAC)
	if(UQUAD_CPU_ARCHITECTURE STREQUAL "x86_64")
		set(FFMPEG_ARCH_X86_32 0)
		set(FFMPEG_ARCH_X86_64 1)
	else()
		set(FFMPEG_ARCH_X86_32 1)
		set(FFMPEG_ARCH_X86_64 0)
	endif()
	configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.mac ${PROJECT_BINARY_DIR}/config.h @ONLY)
	configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libavutil/avconfig.h.mac ${PROJECT_BINARY_DIR}/libavutil/avconfig.h @ONLY)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
	add_definitions(-DPIC)

elseif(UQUAD_PLATFORM_ANDROID)
	#if(UQUAD_CPU_ARCHITECTURE STREQUAL "x86")
	#	set(FFMPEG_ARCH_ARM 0)
	#	set(FFMPEG_ARCH_X86 1)
	#	set(FFMPEG_ARCH_X86_32 1)
	#	set(FFMPEG_ARCH_X86_64 0)
	#else()
		set(FFMPEG_ARCH_ARM 1)
		set(FFMPEG_ARCH_X86 0)
		set(FFMPEG_ARCH_X86_32 0)
		set(FFMPEG_ARCH_X86_64 0)
	#endif()
	
	check_function_exists(log2 FFMPEG_HAVE_LOG2)
	check_function_exists(log2f FFMPEG_HAVE_LOG2F)
	
	if(NOT FFMPEG_HAVE_LOG2)
		set(FFMPEG_HAVE_LOG2 0)
	else()
		set(FFMPEG_HAVE_LOG2 1)
	endif()
	
	if(NOT FFMPEG_HAVE_LOG2F)
		set(FFMPEG_HAVE_LOG2F 0)
	else()
		set(FFMPEG_HAVE_LOG2F 1)
	endif()
	
	configure_file(${CMAKE_CURRENT_SOURCE_DIR}/config.h.android ${PROJECT_BINARY_DIR}/config.h @ONLY)
	configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libavutil/avconfig.h.android ${PROJECT_BINARY_DIR}/libavutil/avconfig.h @ONLY)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
	add_definitions(-DPIC -D_XOPEN_SOURCE=600 -D_POSIX_C_SOURCE=200112)
	enable_language(ASM)
endif()

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${PROJECT_BINARY_DIR})
add_definitions(-D_ISOC99_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -DHAVE_AV_CONFIG_H)


add_subdirectory(libavutil)
add_subdirectory(libavdevice)
add_subdirectory(libavfilter)
add_subdirectory(libavformat)
add_subdirectory(libavcodec)
add_subdirectory(libswresample)
add_subdirectory(libswscale)
