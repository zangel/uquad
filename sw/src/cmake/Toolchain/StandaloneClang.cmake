cmake_minimum_required( VERSION 2.6.3 )
cmake_policy(SET CMP0054 OLD)

#TOOLCHAIN_ARCH := arm
#TOOLCHAIN_ABIS := armeabi armeabi-v7a armeabi-v7a-hard


set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_VERSION 1)
set(ANDROID True)
set(UNIX True)

set(ANDROID_STANDALONE_TOOLCHAIN "" CACHE PATH "Path to standalone clang toolchain")
get_filename_component(ANDROID_STANDALONE_TOOLCHAIN "${ANDROID_STANDALONE_TOOLCHAIN}" ABSOLUTE)

set(ANDROID_SYSROOT "${ANDROID_STANDALONE_TOOLCHAIN}/sysroot")
set(ANDROID_STL_INCLUDE_DIRS "${ANDROID_STANDALONE_TOOLCHAIN}/include/c++/4.8")

set(CMAKE_C_COMPILER	"${ANDROID_STANDALONE_TOOLCHAIN}/bin/clang36" 							CACHE PATH "C compiler")
set(CMAKE_CXX_COMPILER	"${ANDROID_STANDALONE_TOOLCHAIN}/bin/clang36++"							CACHE PATH "C++ compiler")
set(CMAKE_ASM_COMPILER	"${ANDROID_STANDALONE_TOOLCHAIN}/bin/clang36" 							CACHE PATH "Assembler")
set(CMAKE_STRIP			"${ANDROID_STANDALONE_TOOLCHAIN}/bin/arm-linux-androideabi-strip"		CACHE PATH "strip")
set(CMAKE_AR			"${ANDROID_STANDALONE_TOOLCHAIN}/bin/llvm-ar"							CACHE PATH "archive")
set(CMAKE_LINKER		"${ANDROID_STANDALONE_TOOLCHAIN}/bin/llvm-link"							CACHE PATH "link")
set(CMAKE_NM			"${ANDROID_STANDALONE_TOOLCHAIN}/bin/arm-linux-androideabi-nm"			CACHE PATH "nm")
set(CMAKE_OBJCOPY		"${ANDROID_STANDALONE_TOOLCHAIN}/bin/arm-linux-androideabi-objcopy"		CACHE PATH "objcopy")
set(CMAKE_OBJDUMP		"${ANDROID_STANDALONE_TOOLCHAIN}/bin/arm-linux-androideabi-objdump"		CACHE PATH "objdump")
set(CMAKE_RANLIB		"${ANDROID_STANDALONE_TOOLCHAIN}/bin/arm-linux-androideabi-ranlib"		CACHE PATH "ranlib")

include(CMakeForceCompiler)
set(CMAKE_C_COMPILER_WORKS TRUE)
set(CMAKE_CXX_COMPILER_WORKS TRUE)
set(CMAKE_ASM_COMPILER_WORKS TRUE)

set(CMAKE_C_COMPILER_ABI ELF)
set(CMAKE_CXX_COMPILER_ABI ELF)

set(CMAKE_SHARED_LIBRARY_PREFIX "lib")
set(CMAKE_SHARED_LIBRARY_SUFFIX ".so")
set(CMAKE_SHARED_MODULE_PREFIX "lib")
set(CMAKE_SHARED_MODULE_SUFFIX ".so")

set(LLVM_TRIPLE "armv7-none-linux-androideabi")

set(ANDROID_ASM_FLAGS "-x assembler-with-cpp -target ${LLVM_TRIPLE} -march=armv7-a -mfpu=neon -mhard-float -D_NDK_MATH_NO_SOFTFP=1 -fpic")
set(ANDROID_C_FLAGS "-target ${LLVM_TRIPLE} -march=armv7-a -mfpu=neon -mhard-float -D_NDK_MATH_NO_SOFTFP=1 -fpic")
set(ANDROID_CXX_FLAGS "-target ${LLVM_TRIPLE} -march=armv7-a -mfpu=neon -mhard-float -D_NDK_MATH_NO_SOFTFP=1 -fexceptions -frtti -fpic")
set(ANDROID_LD_FLAGS "-target ${LLVM_TRIPLE} -Wl,--fix-cortex-a8 -Wl,--no-warn-mismatch -lm_hard -fPIE -pie")

#set(CMAKE_C_FLAGS_INIT "-fvisibility=hidden -fvisibility-inlines-hidden")
#set(CMAKE_CXX_FLAGS_INIT "-headerpad_max_install_names -fvisibility=hidden -fvisibility-inlines-hidden")

set(CMAKE_ASM_FLAGS             	""							CACHE STRING "asm flags")
set(CMAKE_C_FLAGS             		""							CACHE STRING "c flags")
set(CMAKE_CXX_FLAGS           		""							CACHE STRING "c++ flags")

set(CMAKE_ASM_FLAGS_RELEASE    		"-O3 -DNDEBUG"				CACHE STRING "asm Release flags")
set(CMAKE_C_FLAGS_RELEASE     		"-O3 -DNDEBUG"				CACHE STRING "c Release flags")
set(CMAKE_CXX_FLAGS_RELEASE   		"-O3 -DNDEBUG"				CACHE STRING "c++ Release flags")

set(CMAKE_ASM_FLAGS_DEBUG    		"-O0 -gdwarf-2 -UNDEBUG"	CACHE STRING "asm Debug flags")
set(CMAKE_C_FLAGS_DEBUG       		"-O0 -gdwarf-2 -UNDEBUG"    CACHE STRING "c Debug flags")
set(CMAKE_CXX_FLAGS_DEBUG     		"-O0 -gdwarf-2 -UNDEBUG"	CACHE STRING "c++ Debug flags")

set(CMAKE_ASM_FLAGS_RELWITHDEBINFO  "-O2 -gdwarf-2 -DNDEBUG"	CACHE STRING "asm Release with debug info flags")
set(CMAKE_C_FLAGS_RELWITHDEBINFO	"-O2 -gdwarf-2 -DNDEBUG"    CACHE STRING "c Release with debug info flags")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO	"-O2 -gdwarf-2 -DNDEBUG"	CACHE STRING "c++ Release with debug info flags")

set(CMAKE_SHARED_LINKER_FLAGS 	""								CACHE STRING "shared linker flags")
set(CMAKE_MODULE_LINKER_FLAGS 	""								CACHE STRING "module linker flags")
set(CMAKE_EXE_LINKER_FLAGS    	""								CACHE STRING "executable linker flags")

set(CMAKE_ASM_FLAGS				"${ANDROID_ASM_FLAGS} ${CMAKE_ASM_FLAGS}")
set(CMAKE_C_FLAGS				"${ANDROID_C_FLAGS} ${CMAKE_C_FLAGS}")
set(CMAKE_CXX_FLAGS				"${ANDROID_CXX_FLAGS} ${CMAKE_CXX_FLAGS}")
set(CMAKE_C_FLAGS_RELEASE		"${ANDROID_C_FLAGS_RELEASE} ${CMAKE_C_FLAGS_RELEASE}")
set(CMAKE_CXX_FLAGS_RELEASE		"${ANDROID_CXX_FLAGS_RELEASE} ${CMAKE_CXX_FLAGS_RELEASE}")
set(CMAKE_C_FLAGS_DEBUG			"${ANDROID_C_FLAGS_DEBUG} ${CMAKE_C_FLAGS_DEBUG}")
set(CMAKE_CXX_FLAGS_DEBUG		"${ANDROID_CXX_FLAGS_DEBUG} ${CMAKE_CXX_FLAGS_DEBUG}")
set(CMAKE_SHARED_LINKER_FLAGS	"${ANDROID_LD_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS}")
set(CMAKE_MODULE_LINKER_FLAGS	"${ANDROID_LD_FLAGS} ${CMAKE_MODULE_LINKER_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS		"${ANDROID_LD_FLAGS} ${CMAKE_EXE_LINKER_FLAGS}")

include_directories(SYSTEM "${ANDROID_SYSROOT}/usr/include" ${ANDROID_STL_INCLUDE_DIRS})

set(CMAKE_COMPILER_IS_CLANG 1)

set(CMAKE_C_CREATE_SHARED_LIBRARY	"<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_C_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
set(CMAKE_C_CREATE_SHARED_MODULE	"<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_C_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
set(CMAKE_C_LINK_EXECUTABLE			"<CMAKE_C_COMPILER> <FLAGS> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")


set(CMAKE_CXX_CREATE_SHARED_LIBRARY	"<CMAKE_CXX_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
set(CMAKE_CXX_CREATE_SHARED_MODULE	"<CMAKE_CXX_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>")
set(CMAKE_CXX_LINK_EXECUTABLE		"<CMAKE_CXX_COMPILER> <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")


